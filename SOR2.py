# -*- coding: utf-8 -*-
"""
Created on Thu Nov 15 17:24:11 2018

@author: Youhan0
"""

import numpy as np
from numpy.linalg import * 

def SOR(A,b,w,tol):
    
    n=len(A)
    D=np.mat(np.zeros((n,n)))
    L=np.mat(np.zeros((n,n)))
    U=np.mat(np.zeros((n,n)))
    for i in range(0,n):
        D[i,i]=A[i,i]
    for i in range(1,n):
        for j in range(0,i):
            L[i,j]=-A[i,j]
    for i in range(0,n):
        for j in range(i+1,n):
            U[i,j]=-A[i,j]
    J=D.I*(L+U)
    G=(D-L).I*U
    w,v=eig(J)
    #print(eig(J))
    #print(eig(G))
    if max(abs(w))>=1:
        print("谱半径大于等于1，不收敛")
        return(0)
    else:
        print("谱半径小于1，收敛")
    
    N=np.shape(A)[0]
    x=np.mat(np.zeros((N,1)))
    def fun(x1):
        x2=np.mat(np.zeros((N,1)))
        for i in range(N):
            sum1=0.0
            sum2=0.0
            for j in range(i):
                sum1+=A[i,j]*x2[j,0]
            for j in range(i,N):
                sum2+=A[i,j]*x1[j,0]
            x2[i,0]=x1[i,0]+w*((b[i]-sum1-sum2)/A[i,i])
        return(x2)
          
    k=0
    while max(abs(x-fun(x)))>=tol:
        temp=fun(x)
        x=temp
        k+=1
        #print("第" + str(k) + "次结果：x=")
        #print(x)
    print("迭代次数："+str(k))
    print("最终结果：")
    print(x)
    return(x)
    

"""main"""
tol=1e-6 #tol为精度要求
w=1 #w为松弛因子
A=np.mat([[8.0,-3.0,2.0],
          [4.0,11.0,-1.0],
          [6.0,3.0,12.0]])
b=np.mat([[20.0],
          [33.0],
          [36.0]])
SOR(A,b,w,tol)
    
tol=1e-5 #tol为精度要求
#w=0.8
#w=0.9
w=1.0
#w=1.1
#w=1.2 #w为松弛因子
A3=np.mat([[4.0, 2.0, -3.0, -1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0],
           [8.0, 6.0, -5.0, -3.0, 6.0, 5.0, 0.0, 1.0, 0.0, 0.0],
           [4.0, 2.0, -2.0, -1.0, 3.0, 2.0, -1.0, 0.0, 3.0, 1.0],
           [0.0, -2.0, 1.0, 5.0, -1.0, 3.0, -1.0, 1.0, 9.0, 4.0],
           [-4.0, 2.0, 6.0, -1.0, 6.0, 7.0, -3.0, 3.0, 2.0, 3.0],
           [8.0, 6.0, -8.0, 5.0, 7.0, 17.0, 2.0, 6.0, -3.0, 5.0],
           [0.0, 2.0, -1.0, 3.0, -4.0, 2.0, 5.0, 3.0, 0.0, 1.0],
           [16.0, 10.0, -11.0, -9.0, 17.0, 34.0, 2.0, -1.0, 2.0, 2.0],
           [4.0, 6.0, 2.0, -7.0, 13.0, 9.0, 2.0, 0.0, 12.0, 4.0],
           [0.0, 0.0, -1.0, 8.0, -3.0, -24.0, -8.0, 6.0, 3.0, -1.0]])
b3=np.mat([[5.0],[12.0],[3.0],[2.0],[3.0],[46.0],[13.0],[38.0],[19.0],[-21.0]])
SOR(A3,b3,w,tol)

#w=0.8
#w=0.9
w=1.0
#w=1.1
#w=1.2 #w为松弛因子
A4=np.mat([[4.0, 2.0, -4.0, 0.0, 2.0, 4.0, 0.0, 0.0],
           [2.0, 2.0, -1.0, -2.0, 1.0, 3.0, 2.0, 0.0],
           [-4.0, -1.0, 14.0, 1.0, -8.0, -3.0, 5.0, 6.0],
           [0.0, -2.0, 1.0, 6.0, -1.0, -4.0, -3.0, 3.0],
           [2.0, 1.0, -8.0, -1.0, 22.0, 4.0, -10.0, -3.0],
           [4.0, 3.0, -3.0, -4.0, 4.0, 11.0, 1.0, -4.0],
           [0.0, 2.0, 5.0, -3.0, -10.0, 1.0, 14.0, 2.0],
           [0.0, 0.0, 6.0, 3.0, -3.0, -4.0, 2.0, 19.0]])
b4=np.mat([[0.0],[-6.0],[20.0],[23.0],[9.0],[-22.0],[-15.0],[45.0]])
SOR(A4,b4,w,tol)

#w=0.8
#w=0.9
w=1.0
#w=1.1
#w=1.2 #w为松弛因子
A5=np.mat([[4.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
           [-1.0, 4.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
           [0.0, -1.0, 4.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
           [0.0, 0.0, -1.0, 4.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
           [0.0, 0.0, 0.0, -1.0, 4.0, -1.0, 0.0, 0.0, 0.0, 0.0],
           [0.0, 0.0, 0.0, 0.0, -1.0, 4.0, -1.0, 0.0, 0.0, 0.0],
           [0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 4.0, -1.0, 0.0, 0.0],
           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 4.0, -1.0, 0.0],
           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 4.0, -1.0],
           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 4.0]])
b5=np.mat([[7.0],[5.0],[-13.0],[2.0],[6.0],[-12.0],[14.0],[-4.0],[5.0],[-5.0]])
SOR(A5,b5,w,tol)

